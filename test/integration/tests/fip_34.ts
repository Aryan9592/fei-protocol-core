import chai, { expect } from 'chai';
import CBN from 'chai-bn';
import { solidity } from 'ethereum-waffle';
import { ethers } from 'hardhat';
import { NamedContracts } from '@custom-types/types';
import { getImpersonatedSigner, resetFork, time } from '@test/helpers';
import {
  Fei,
  FeiDAO,
  FeiDAOTimelock,
  OptimisticTimelock,
  Timelock,
  OwnableTimedMinter,
  Tribe
} from '@custom-types/contracts';
import { getAllContracts } from '../setup/loadContracts';
import { constructProposalCalldata } from '@scripts/utils/constructProposalCalldata';

before(async () => {
  chai.use(CBN(ethers.BigNumber));
  chai.use(solidity);
  await resetFork();
});

describe.only('e2e-fip-34', function () {
  let contracts: NamedContracts;
  let deployAddress: string;
  let doLogging: boolean;

  before(async function () {
    // Setup test environment and get contracts
    const version = 1;
    deployAddress = (await ethers.getSigners())[0].address;
    if (!deployAddress) throw new Error(`No deploy address!`);

    doLogging = Boolean(process.env.LOGGING);

    // const config = {
    //   logging: doLogging,
    //   deployAddress: deployAddress,
    //   version: version
    // };

    contracts = await getAllContracts();

    /*
      e2eCoord = new TestEndtoEndCoordinator(config, proposals);
      doLogging && console.log(`Loading environment...`);
      ({ contracts, contractAddresses } = await e2eCoord.loadEnvironment());
      doLogging && console.log(`Environment loaded.`); 
      */

    doLogging && console.log(`Environment loading skipped; this is a pure forked-mainnet test.`);
    doLogging && console.log(`(no impersonating of contract addresses here except the guardian)`);
  });

  describe('fip-34', async function () {
    it('works when we roll back the timelock just before scheduling the vote result', async function () {
      const feiDAO = contracts.feiDAO as FeiDAO;
      const feiDAOTimelock = contracts.feiDAOTimelock as FeiDAOTimelock;
      const governorAlphaTimelock = contracts.timelock as Timelock;
      const fei = contracts.fei as Fei;
      const optimisticTimelock = contracts.optimisticTimelock as OptimisticTimelock;
      const optimisticMinter = contracts.optimisticMinter as OwnableTimedMinter;
      const tribe = contracts.tribe as Tribe;

      const joeyAddress = '0xe0ac4559739bD36f0913FB0A3f5bFC19BCBaCD52';
      const calebAddress = '0xb81cf4981Ef648aaA73F07a18B03970f04d5D8bF';
      const stormAddress = '0xC64Ed730e030BdCB66E9B5703798bb4275A5a484';
      const briAddress = '0x90300D66AF91d5EAB695A07c274E61e1563967C9';
      const nascentAddress = '0x70b6ab736be7672c917a1ab11e67b5bc9fddeca9';
      const buckleyAddress = '0x66b9d411e14fbc86424367b67933945fd7e40b11';
      const frameworkAddress = '0x961bcb93666e0ea73b6d88a03817cb36f93a6dd9';
      const guardianAddress = '0xB8f482539F2d3Ae2C9ea6076894df36D1f632775';

      const joeySigner = await getImpersonatedSigner(joeyAddress);
      const calebSigner = await getImpersonatedSigner(calebAddress);
      const stormSigner = await getImpersonatedSigner(stormAddress);
      const briSigner = await getImpersonatedSigner(briAddress);
      const nascentSigner = await getImpersonatedSigner(nascentAddress);
      const buckleySigner = await getImpersonatedSigner(buckleyAddress);
      const frameworkSigner = await getImpersonatedSigner(frameworkAddress);
      const guardianSigner = await getImpersonatedSigner(guardianAddress);

      // Guardian rolls back the timelock to the old timelock

      // Queue FIP-34 (calldata generated by running the calldata npm script)
      const calldata = await constructProposalCalldata('fip_34');

      const proposeTxReceipt = await (await joeySigner.sendTransaction({ to: feiDAO.address, data: calldata })).wait();
      const proposeTxLog = proposeTxReceipt.logs[0];
      const parsedLog = feiDAO.interface.parseLog(proposeTxLog);
      const proposalId = parsedLog.args[0];

      doLogging && console.log(`ProposalID: ${parsedLog}`);

      // Send eth to voters
      const vitalikAddress = '0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B';
      const vitalikSigner = await getImpersonatedSigner(vitalikAddress);

      await vitalikSigner.sendTransaction({ to: nascentAddress, value: ethers.utils.parseEther('5') });
      await vitalikSigner.sendTransaction({ to: buckleyAddress, value: ethers.utils.parseEther('5') });
      await vitalikSigner.sendTransaction({ to: frameworkAddress, value: ethers.utils.parseEther('5') });

      // Wait 1 hour
      await time.increase(3600);

      // Vote
      doLogging && console.log(`Voting for proposal (joey)`);
      await (await feiDAO.connect(joeySigner).castVote(proposalId, 1)).wait();

      doLogging && console.log(`Voting for proposal (caleb)`);
      await (await feiDAO.connect(calebSigner).castVote(proposalId, 1)).wait();

      doLogging && console.log(`Voting for proposal (storm)`);
      await (await feiDAO.connect(stormSigner).castVote(proposalId, 1)).wait();

      doLogging && console.log(`Voting for proposal (bri)`);
      await (await feiDAO.connect(briSigner).castVote(proposalId, 1)).wait();

      doLogging && console.log(`Voting for proposal (buckley)`);
      await (await feiDAO.connect(buckleySigner).castVote(proposalId, 1)).wait();

      doLogging && console.log(`Voting for proposal (framework)`);
      await (await feiDAO.connect(frameworkSigner).castVote(proposalId, 1)).wait();

      doLogging && console.log(`Voting for proposal (nascent)`);
      await (await feiDAO.connect(nascentSigner).castVote(proposalId, 1)).wait();

      const proposalData = await feiDAO.proposals(proposalId);

      const endBlock = proposalData[4];
      const votesFor = ethers.utils.parseUnits(proposalData[5].toString(), 'wei');

      doLogging && console.log(`# of votes so far: ${votesFor}`);

      // Advance to end of voting period and roll back the timelock via the guardian
      await time.advanceBlockTo(endBlock.toNumber() + 1);
      await (await feiDAOTimelock.connect(guardianSigner).rollback()).wait();

      // Queue FIP-34
      await (await feiDAO.connect(joeySigner)['queue(uint256)'](proposalId)).wait();

      // Wait 3 days
      await time.increase(259200);

      // Execute FIP-34
      await (await feiDAO.connect(joeySigner)['execute(uint256)'](proposalId)).wait();

      // Check everything
      expect(await fei.balanceOf(optimisticTimelock.address)).to.be.bignumber.greaterThan(
        ethers.constants.WeiPerEther.mul(100_000_000)
      );

      expect(await optimisticMinter.owner()).to.be.equal(optimisticTimelock.address);
      expect(await optimisticMinter.isTimeStarted()).to.be.true;
      expect(await governorAlphaTimelock.admin()).to.be.equal(feiDAO.address);
      expect(await feiDAOTimelock.admin()).to.be.equal(feiDAO.address);
      expect(await feiDAO.timelock()).to.be.equal(feiDAOTimelock.address);
      expect(await tribe.minter()).to.be.equal(feiDAOTimelock.address);
    });
  });
});
