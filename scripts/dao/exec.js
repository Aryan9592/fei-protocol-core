
const { time } = require('@openzeppelin/test-helpers');
require('@openzeppelin/test-helpers/configure')({
    provider: 'http://localhost:7545',
});

const GovernorAlpha = artifacts.require("GovernorAlpha");
const data = "0xda95691a00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000050000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b90000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b90000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b90000000000000000000000008d5ed43dca8c2f7dfb20cf7b53cc7e593635d7b90000000000000000000000000760dfe09bd6d04d0df9a60c51f01ecedceba000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000001b6772616e74504356436f6e74726f6c6c6572286164647265737329000000000000000000000000000000000000000000000000000000000000000000000000146772616e744d696e746572286164647265737329000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c7265766f6b65504356436f6e74726f6c6c65722861646472657373290000000000000000000000000000000000000000000000000000000000000000000000157265766f6b654d696e746572286164647265737329000000000000000000000000000000000000000000000000000000000000000000000000000000000000167365745043564465706f73697428616464726573732900000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000760dfe09bd6d04d0df9a60c51f01ecedceb513200000000000000000000000000000000000000000000000000000000000000200000000000000000000000000760dfe09bd6d04d0df9a60c51f01ecedceb513200000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a165f8518a9ec7d5da15f4b77b1d7128b5d918800000000000000000000000000000000000000000000000000000000000000200000000000000000000000007a165f8518a9ec7d5da15f4b77b1d7128b5d918800000000000000000000000000000000000000000000000000000000000000200000000000000000000000005d6446880fcd004c851ea8920a628c70ca10111700000000000000000000000000000000000000000000000000000000000005da4649502d333a20526567756c617220526577656967687473200a546869732070726f706f73616c207265696e73746174657320726577656967687473206f6e20746865204645492d2045544820756e697377617020706169722077697468206120666978656420636164656e63652e20576520696e636c7564652074686520666f6c6c6f77696e6720706172616d65746572206368616e6765733a0a0a536574207265776569676874206672657175656e637920746f203420686f7572730a4c6f77657220746865206d696e2064697374616e63652062656c6f772070656720666f7220612072657765696768742066726f6d20312520746f20302e35250a4c6f776572207265776569676874206b65657065722072657761726420746f20323030204645490a0a3420486f7572204672657175656e63790a54686520666173742c20726567756c617220726577656967687420636164656e6365206f66203420686f7572732077696c6c2068656c70206372656174652061207374726f6e67206578706563746174696f6e207468617420616e7920646576696174696f6e732066726f6d20746865207065672077696c6c20736f6f6e20626520636f72726563746564206279207468652070726f746f636f6c2c20616e6420746865206d656368616e69736d7320666f7220746869732061726520726f6275737420616e642073696d706c6520746f20756e6465727374616e642e20486176696e67207468656d207468726f7567686f757420746865206461792077696c6c20656e73757265206e6f2067656f67726170686963616c20726567696f6e732061726520676976656e207370656369616c20616476616e746167652e0a0a4d696e696d756d2044697374616e63652042656c6f77207468652050656720746f20302e35250a4c6f776572696e6720746865206d696e696d756d2064697374616e636520666f72206120726577656967687420746f20302e352520666f737465727320612074696768746572207065672e2052657765696768747320636f756c6420626520747269676765726564206d6f7265206672657175656e746c7920616e642061742061206c6f77657220636f737420746f207468652070726f746f636f6c2e0a0a4c6f776572696e67204b65657065722052657761726420746f20323030204645490a0a4c6f776572696e6720746865204645492072657761726420746f2032303020616c6c6f7773207468652070726f746f636f6c20746f207265647563652046454920696e666c6174696f6e206f6e207468652072657765696768747320776869636820636f756c64206f63637572206f76657220322074686f7573616e642074696d65732061207965617220776974682074686520342d686f757220636164656e63652e205468652074727565206e756d62657220776f756c64206c696b656c79206265206c6f7765722c206173207468697320617373756d6573206120726577656967687420696e206576657279203420686f757220696e74657276616c2e0a0a466f72206d6f72652064697363757373696f6e207365652074686520666f72756d3a2068747470733a2f2f74726962652e6665692e6d6f6e65792f742f6669702d332d66697865642d636164656e63652d7265776569676874732f333230310a0a436f64653a2068747470733a2f2f6769746875622e636f6d2f6665692d70726f746f636f6c2f6665692d70726f746f636f6c2d636f72652f70756c6c2f39360a0a41636365737320436f6e74726f6c204368616e6765733a0a4772616e74204d696e74657220616e6420504356436f6e74726f6c6c657220746f2030783037363064666530396264366430346430646639613630633531663031656365646365623531333220286e657720636f6e74726f6c6c6572290a5265766f6b65204d696e74657220616e6420504356436f6e74726f6c6c65722066726f6d2030783761313635463835313841394563376435444131356634423737423164373132384235443931383820286f6c6420636f6e74726f6c6c657229000000000000";

module.exports = async function(callback) {
  require('dotenv').config();

  var proposer, voter, governorAddress;
  if (process.env.TESTNET_MODE) {
    console.log('Testnet mode');
    proposer = process.env.RINKEBY_PROPOSER;
    voter = process.env.RINKEBY_VOTER;
    governorAddress = process.env.RINKEBY_GOVERNOR_ALPHA;
  } else {
    console.log('Mainnet mode');
    proposer = process.env.MAINNET_PROPOSER;
    voter = process.env.MAINNET_VOTER;
    governorAddress = process.env.MAINNET_GOVERNOR_ALPHA;
  } 

  if (data) {
    console.log("Submitting Proposal");
    await web3.eth.sendTransaction({from: proposer, to: governorAddress, data: data, gas: 3000000});
  }

  let governor = await GovernorAlpha.at(governorAddress);

  let proposalNo = await governor.latestProposalIds(proposer);

  console.log(`Proposal Number: ${proposalNo}`);

  let proposal = await governor.proposals(proposalNo);
  let startBlock = proposal['startBlock'];

  console.log(`Advancing To: ${startBlock}`);
  await time.advanceBlockTo(startBlock);

  console.log("Casting vote");
  await governor.castVote(proposalNo, true, {from: voter});

  proposal = await governor.proposals(proposalNo);
  let endBlock = proposal['endBlock'];

  console.log(`Advancing To: ${endBlock}`);
  await time.advanceBlockTo(endBlock);

  console.log('Queuing');
  await governor.queue(proposalNo);

  console.log('Increasing Time');
  await time.increase(140000);

  console.log('Executing');
  await governor.execute(proposalNo);
  console.log('Success');

  callback();
}